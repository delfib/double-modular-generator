-- R Protocol

-- Client module 
MODULE Client(ch_head_server, Q_SIZE)
VAR
    client_state : {sending, sent};    
    ch_tail_client : 0..3;      
    full_channel : boolean; 

ASSIGN
    init(client_state) := sending;
    init(ch_tail_client) := 0;
    init(full_channel) := FALSE;

    next(full_channel) := ((ch_tail_client + 1) mod Q_SIZE) = ch_head_server;    
    next(client_state) :=
        case
            client_state = sending & full_channel : sending;
            client_state = sending & !full_channel : sent;
            client_state = sent & !full_channel : sending;
            client_state = sent & full_channel : sent;                
        esac;

    -- the tail pointer is only updated once a message is sent
    next(ch_tail_client) :=
        case
            client_state = sending & !full_channel : (ch_tail_client+1) mod Q_SIZE;
            TRUE : ch_tail_client;
        esac;
FAIRNESS
    running



-- Server module
MODULE Server(ch_tail_client, Q_SIZE, head_pointer)
VAR
    server_state : {receiving, received, failed};  
    empty_channel : boolean; 

ASSIGN
    init(server_state) := receiving;
    init(empty_channel) := TRUE;

    next(empty_channel) := (ch_tail_client = head_pointer);
    next(server_state) :=
        case
            server_state = receiving & empty_channel : {receiving, failed};
            server_state = receiving & !empty_channel : {received, failed};
            server_state = received & !empty_channel : {receiving, failed};
            server_state = received & empty_channel : {received, failed};     
            server_state = failed : failed;
        esac;

    next(head_pointer) :=
        case
            server_state = receiving & !empty_channel : (head_pointer + 1) mod Q_SIZE;
            TRUE : head_pointer;
        esac;
FAIRNESS
    running






MODULE main
DEFINE
    Q_SIZE := 4;
VAR
    head_pointer : 0..3;
    client  : process Client(head_pointer, Q_SIZE);
    server1 : process Server(client.ch_tail_client, Q_SIZE, head_pointer);
    server2 : process Server(client.ch_tail_client, Q_SIZE, head_pointer);
ASSIGN
    init(head_pointer) := 0;


SPEC AG !(client.full_channel & client.client_state = sending)
SPEC AG !(server1.empty_channel & server1.server_state = received)
SPEC AG !(server2.empty_channel & server2.server_state = received)



